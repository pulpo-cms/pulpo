{"version":3,"file":"index.js","sources":["../src/controllers/search_form.js","../src/controllers/media_library_upload_btn.js","../src/lib/api.js","../src/controllers/sortable.js","../src/controllers/image_input.js"],"sourcesContent":["import { Controller } from \"stimulus\"\n\nclass SearchForm extends Controller {\n  static targets = [ \"toggleBtn\", \"moreFilters\" ]\n\n  toggleMoreFilters (e) {\n    e.preventDefault()\n    this.moreFiltersTarget.classList.toggle('d-none')\n  }\n\n  submitForm (e) {\n    if (e.key == 'Enter') {\n      this.element.submit()\n    }\n  }\n}\n\nexport default SearchForm\n","import { Controller } from \"stimulus\"\nimport Turbolinks from 'turbolinks'\n\n// Import uppy\nconst Uppy = require('@uppy/core')\nconst XHRUpload = require('@uppy/xhr-upload')\nconst Dashboard = require('@uppy/dashboard')\nconst ActiveStorageUpload = require('uppy-activestorage-upload')\n\nclass MediaLibraryUploadBtn extends Controller {\n  static targets = ['trigger', 'modal']\n\n  initialize () {\n    const uppy = Uppy()\n      .use(Dashboard, {\n        trigger: this.triggerTarget,\n        target: this.modalTarget,\n      })\n\n      uppy.use(ActiveStorageUpload, {\n        directUploadUrl: this.data.get('upload-url')\n      })\n\n      uppy.on('complete', (result) => {\n        setTimeout(() => {\n          window.location.replace(this.data.get('media-library-path'))\n        }, 1000)\n      })\n  }\n}\n\nexport default MediaLibraryUploadBtn\n","import Rails from 'rails-ujs'\n\nfunction serializeQuery(params, prefix) {\n  const query = Object.keys(params).map((key) => {\n    const value  = params[key];\n\n    if (params.constructor === Array)\n      key = `${prefix}[]`;\n    else if (params.constructor === Object)\n      key = (prefix ? `${prefix}[${key}]` : key);\n\n    if (typeof value === 'object')\n      return serializeQuery(value, key);\n    else\n      return `${key}=${encodeURIComponent(value)}`;\n  });\n\n  return [].concat.apply([], query).join('&');\n}\n\nexport default {\n  async updateOrder (model, ids) {\n    return Rails.ajax({\n      type: 'PUT',\n      url: `/admin/reorder/${model}.json`,\n      data: serializeQuery({ ids: ids }, '')\n    })\n  },\n\n  async getMedium (id, args = {}) {\n    return Rails.ajax(Object.assign({\n      type: 'GET',\n      url: `/api/v1/media/${id}`\n    }, args))\n  }\n}\n","import { Controller } from \"stimulus\"\nimport dragula from 'dragula'\nimport api from '../lib/api'\n\nclass Sortable extends Controller {\n  static targets = [\"container\", \"draggable\"]\n\n  connect () {\n    this.drake = dragula({\n      containers: [this.containerTarget],\n      direction: this.direction,\n      mirrorContainer: this.containerTarget,\n\n      moves: (el, container, handle) => {\n        return handle.dataset.target == 'sortable.handle'\n      }\n    })\n\n    this.drake.on('drop', () => this.onDrop())\n  }\n\n  onDrop () {\n    // Set timeout as the dragged copy of element is still present in the DOM\n    // when user drops it for a few moments.\n    setTimeout(() => {\n      api.updateOrder(this.model, this.draggableIds)\n    }, 300)\n  }\n\n  get direction () {\n    return this.data.get('direction') || 'vertical'\n  }\n\n  get model () {\n    return this.data.get('model')\n  }\n\n  get draggableIds () {\n    return this.draggableTargets.map((d) => {\n      return d.dataset.id\n    })\n  }\n}\n\nexport default Sortable\n","import { Controller } from \"stimulus\"\nimport { DirectUpload } from \"@rails/activestorage\"\nimport Api from '../lib/api'\n\nexport default class extends Controller {\n  static targets = ['input', 'progress', 'uploaded', 'uploadedImg']\n\n  connect () {\n    if (this.isAttached) {\n      this.isEmpty = false\n      this.isUploaded = true\n    }\n  }\n\n  upload () {\n    Array.from(this.inputTarget.files).forEach(file => this.doUpload(file))\n\n    // clear the input\n    this.inputTarget.value = null\n  }\n\n  doUpload (file) {\n    this.isEmpty = false\n    this.isUploading = true\n    const upload = new DirectUpload(file, this.uploadUrl)\n\n    upload.create((error, blob) => {\n      if (error) {\n        alert('Something went wrong')\n      } else {\n        const hiddenField = document.createElement('input')\n        let _this = this\n\n        hiddenField.setAttribute('type', 'hidden')\n        hiddenField.setAttribute('value', blob.signed_id)\n        hiddenField.name = this.inputTarget.name\n        this.element.appendChild(hiddenField)\n\n        let req = Api.getMedium(blob.id, {\n          success: function (resp) {\n            _this.uploadedImageUrl = resp.data.attributes.sizes.original\n          }\n        })\n\n        this.isUploading = false\n        this.isUploaded = true\n      }\n    })\n  }\n\n  set isEmpty (value) {\n    this._isEmpty = value\n\n    if (value) {\n      this.inputTarget.classList.remove('d-none')\n    } else {\n      this.inputTarget.classList.add('d-none')\n    }\n  }\n\n  set isUploading (value) {\n    this._isUploading = value\n\n    if (value) {\n      this.progressTarget.classList.remove('d-none')\n    } else {\n      this.progressTarget.classList.add('d-none')\n    }\n  }\n\n  set isUploaded (value) {\n    this._isUploaded = value\n\n    if (value) {\n      this.uploadedTarget.classList.remove('d-none')\n    } else {\n      this.uploadedTarget.classList.add('d-none')\n    }\n  }\n\n  set uploadedImageUrl (value) {\n    this.uploadedImgTarget.setAttribute('src', value)\n  }\n\n  get isUploading () {\n    return this._isUploading\n  }\n\n  get isUploaded () {\n    return this._isUploaded\n  }\n\n  get uploadUrl () {\n    return this.data.get('upload-url')\n  }\n\n  get isAttached () {\n    return this.data.get('attached') == 'true'\n  }\n}\n"],"names":["SearchForm","toggleMoreFilters","e","preventDefault","moreFiltersTarget","classList","toggle","submitForm","key","element","submit","Controller","targets","const","Uppy","require","Dashboard","ActiveStorageUpload","MediaLibraryUploadBtn","initialize","uppy","use","trigger","this","triggerTarget","target","modalTarget","directUploadUrl","data","get","on","result","setTimeout","window","location","replace","serializeQuery","params","prefix","query","Object","keys","map","value","constructor","Array","encodeURIComponent","concat","apply","join","model","ids","Rails","ajax","type","url","id","args","assign","Sortable","connect","drake","dragula","containers","containerTarget","direction","mirrorContainer","moves","el","container","handle","dataset","onDrop","api","draggableIds","draggableTargets","d","isAttached","isEmpty","isUploaded","upload","from","inputTarget","files","forEach","file","doUpload","isUploading","DirectUpload","uploadUrl","create","error","blob","alert","hiddenField","document","createElement","_this","setAttribute","signed_id","name","appendChild","Api","success","resp","uploadedImageUrl","attributes","sizes","original","_isEmpty","remove","add","_isUploading","progressTarget","_isUploaded","uploadedTarget","uploadedImgTarget"],"mappings":"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"}