{"version":3,"file":"index.js","sources":["../src/controllers/search_form.js","../src/controllers/media_library_upload_btn.js","../src/lib/api.js","../src/controllers/sortable.js","../src/controllers/image_input.js","../src/controllers/images_input.js","../src/controllers/localized_content.js"],"sourcesContent":["import { Controller } from \"stimulus\"\n\nclass SearchForm extends Controller {\n  static targets = [ \"toggleBtn\", \"moreFilters\" ]\n\n  toggleMoreFilters (e) {\n    e.preventDefault()\n    this.moreFiltersTarget.classList.toggle('d-none')\n  }\n\n  submitForm (e) {\n    if (e.key == 'Enter') {\n      this.element.submit()\n    }\n  }\n}\n\nexport default SearchForm\n","import { Controller } from \"stimulus\"\nimport Turbolinks from 'turbolinks'\n\n// Import uppy\nconst Uppy = require('@uppy/core')\nconst XHRUpload = require('@uppy/xhr-upload')\nconst Dashboard = require('@uppy/dashboard')\nconst ActiveStorageUpload = require('uppy-activestorage-upload')\n\nclass MediaLibraryUploadBtn extends Controller {\n  static targets = ['trigger', 'modal']\n\n  initialize () {\n    const uppy = Uppy()\n      .use(Dashboard, {\n        trigger: this.triggerTarget,\n        target: this.modalTarget,\n      })\n\n      uppy.use(ActiveStorageUpload, {\n        directUploadUrl: this.data.get('upload-url')\n      })\n\n      uppy.on('complete', (result) => {\n        setTimeout(() => {\n          window.location.replace(this.data.get('media-library-path'))\n        }, 1000)\n      })\n  }\n}\n\nexport default MediaLibraryUploadBtn\n","import Rails from 'rails-ujs'\n\nfunction serializeQuery(params, prefix) {\n  const query = Object.keys(params).map((key) => {\n    const value  = params[key];\n\n    if (params.constructor === Array)\n      key = `${prefix}[]`;\n    else if (params.constructor === Object)\n      key = (prefix ? `${prefix}[${key}]` : key);\n\n    if (typeof value === 'object')\n      return serializeQuery(value, key);\n    else\n      return `${key}=${encodeURIComponent(value)}`;\n  });\n\n  return [].concat.apply([], query).join('&');\n}\n\nexport default {\n  async updateOrder (model, ids) {\n    return Rails.ajax({\n      type: 'PUT',\n      url: `/admin/reorder/${model}.json`,\n      data: serializeQuery({ ids: ids }, '')\n    })\n  },\n\n  async getMedium (id, args = {}) {\n    return Rails.ajax(Object.assign({\n      type: 'GET',\n      url: `/api/v1/media/${id}`\n    }, args))\n  }\n}\n","import { Controller } from \"stimulus\"\nimport dragula from 'dragula'\nimport api from '../lib/api'\n\nclass Sortable extends Controller {\n  static targets = [\"container\", \"draggable\"]\n\n  connect () {\n    this.drake = dragula({\n      containers: [this.containerTarget],\n      direction: this.direction,\n      mirrorContainer: this.containerTarget,\n\n      moves: (el, container, handle) => {\n        return handle.dataset.target == 'sortable.handle'\n      }\n    })\n\n    this.drake.on('drop', () => this.onDrop())\n  }\n\n  onDrop () {\n    // Set timeout as the dragged copy of element is still present in the DOM\n    // when user drops it for a few moments.\n    setTimeout(() => {\n      api.updateOrder(this.model, this.draggableIds)\n    }, 300)\n  }\n\n  get direction () {\n    return this.data.get('direction') || 'vertical'\n  }\n\n  get model () {\n    return this.data.get('model')\n  }\n\n  get draggableIds () {\n    return this.draggableTargets.map((d) => {\n      return d.dataset.id\n    })\n  }\n}\n\nexport default Sortable\n","import { Controller } from \"stimulus\"\nimport { DirectUpload } from \"@rails/activestorage\"\nimport Api from '../lib/api'\n\nexport default class extends Controller {\n  static targets = [\n    'inputContainer',\n    'input',\n    'progress',\n    'uploaded',\n    'uploadedImg'\n  ]\n\n  connect () {\n    if (this.isAttached) {\n      this.isEmpty = false\n      this.isUploaded = true\n    }\n  }\n\n  upload () {\n    Array.from(this.inputTarget.files).forEach(file => this.doUpload(file))\n\n    // clear the input\n    this.inputTarget.value = null\n  }\n\n  doUpload (file) {\n    this.isEmpty = false\n    this.isUploading = true\n    const upload = new DirectUpload(file, this.uploadUrl)\n\n    upload.create((error, blob) => {\n      if (error) {\n        alert('Something went wrong')\n      } else {\n        const hiddenField = document.createElement('input')\n        let _this = this\n\n        hiddenField.setAttribute('type', 'hidden')\n        hiddenField.setAttribute('value', blob.signed_id)\n        hiddenField.name = this.inputTarget.name\n        this.element.appendChild(hiddenField)\n\n        let req = Api.getMedium(blob.id, {\n          success: function (resp) {\n            _this.uploadedImageUrl = resp.data.attributes.sizes.original\n          }\n        })\n\n        this.isUploading = false\n        this.isUploaded = true\n      }\n    })\n  }\n\n  set isEmpty (value) {\n    this._isEmpty = value\n\n    if (value) {\n      this.inputContainerTarget.classList.remove('d-none')\n    } else {\n      this.inputContainerTarget.classList.add('d-none')\n    }\n  }\n\n  set isUploading (value) {\n    this._isUploading = value\n\n    if (value) {\n      this.progressTarget.classList.remove('d-none')\n    } else {\n      this.progressTarget.classList.add('d-none')\n    }\n  }\n\n  set isUploaded (value) {\n    this._isUploaded = value\n\n    if (value) {\n      this.uploadedTarget.classList.remove('d-none')\n    } else {\n      this.uploadedTarget.classList.add('d-none')\n    }\n  }\n\n  set uploadedImageUrl (value) {\n    this.uploadedImgTarget.setAttribute('src', value)\n  }\n\n  get isUploading () {\n    return this._isUploading\n  }\n\n  get isUploaded () {\n    return this._isUploaded\n  }\n\n  get uploadUrl () {\n    return this.data.get('upload-url')\n  }\n\n  get isAttached () {\n    return this.data.get('attached') == 'true'\n  }\n}\n","import { Controller } from \"stimulus\"\nimport { DirectUpload } from \"@rails/activestorage\"\n// import Api from '../lib/api'\nimport Kitsu from 'kitsu'\nimport Mustache from 'mustache'\nimport Turbolinks from 'turbolinks'\nimport dragula from 'dragula'\n\nconst api = new Kitsu({\n  baseURL: '/api/v1'\n})\n\nexport default class extends Controller {\n  static targets = [\n    'input',\n    'mediaIdsInput',\n    'imagesContainer',\n    'imageTemplate'\n  ]\n\n  connect() {\n    this._fetchInitialMedia()\n    this._setupDragula()\n  }\n\n  upload() {\n    Array.from(this.inputTarget.files).forEach(file => this._doUpload(file))\n\n    // clear the input\n    this.inputTarget.value = null\n  }\n\n  removeImage (e) {\n    e.preventDefault()\n\n    let childs = Array.from(this.imagesContainerTarget.childNodes)\n    let image = childs.find((child) => {\n      return child.getAttribute('data-id') == e.currentTarget.getAttribute('data-id')\n    })\n\n    if (!image) return false\n\n    image.remove()\n    this._refreshMediaIds()\n  }\n\n  _addImageToList (data = {}) {\n    let newImage = document.createElement('div')\n    newImage.innerHTML = Mustache.render(this.imageTemplateTarget.innerHTML, data)\n    this.imagesContainerTarget.appendChild(newImage.children[0])\n  }\n\n  _renderMedia () {\n    this.imagesContainerTarget.innerHTML = ''\n    this.mediaData.forEach((media) => { this._addImageToList(media) })\n  }\n\n  _refreshMediaIds () {\n    this.mediaIds = this.mediaData.map((m) => parseInt(m.id))\n  }\n\n  _doUpload(file) {\n    const upload = new DirectUpload(file, this.uploadUrl)\n\n    this._showUploadProgress()\n\n    upload.create((error, blob) => {\n      this._hideUploadProgress()\n\n      if (error) {\n        alert('Something went wrong')\n      } else {\n        let req = api.get(`media/${blob.id}`)\n        req.then((resp) => {\n          let mediaData = this.mediaData\n          mediaData.push(resp.data)\n          this.mediaData = mediaData\n          this._renderMedia()\n          this._refreshMediaIds()\n        })\n      }\n    })\n  }\n\n  _showUploadProgress () {\n    Turbolinks.controller.adapter.progressBar.setValue(0.8)\n    Turbolinks.controller.adapter.progressBar.show()\n  }\n\n  _hideUploadProgress() {\n    Turbolinks.controller.adapter.progressBar.setValue(0)\n    Turbolinks.controller.adapter.progressBar.hide()\n  }\n\n  _fetchInitialMedia () {\n    let req = api.get('media', {\n      sort: 'position',\n      filter: { id: this.mediaIds.join(',') }\n    })\n\n    req.then((resp) => {\n      this.mediaData = resp.data\n      this._renderMedia()\n    })\n  }\n\n  _setupDragula () {\n    this.drake = dragula({\n      containers: [this.imagesContainerTarget],\n      mirrorContainer: this.imagesContainerTarget,\n    })\n\n    this.drake.on('drop', () => {\n      setTimeout(() => {\n        this._refreshMediaIds()\n      }, 150)\n    })\n  }\n\n  // Iterates through images and sets mediaIds input with their ids inproper\n  // order\n  _refreshMediaIds () {\n    let childs = Array.from(this.imagesContainerTarget.childNodes)\n    let ids = childs.map((child) => {\n      return child.getAttribute('data-id')\n    })\n\n    this.mediaIds = ids\n  }\n\n  get mediaIds () {\n    return JSON.parse(this.data.get('media-ids'))\n  }\n\n  get mediaData () {\n    return JSON.parse(this.data.get('media'))\n  }\n\n  get uploadUrl () {\n    return this.data.get('upload-url')\n  }\n\n  set mediaIds (ids) {\n    this.data.set('media-ids', JSON.stringify(ids))\n    this.mediaIdsInputTarget.value = ids.join(',')\n  }\n\n  set mediaData (data) {\n    this.data.set('media', JSON.stringify(data))\n  }\n}\n","import { Controller } from \"stimulus\"\n\nexport default class extends Controller {\n  static targets = [\n    'segment',\n    'currentLocale',\n    'switch'\n  ]\n\n  connect () {\n    // Refresh state\n    this.currentLocaleCode = this.currentLocaleCode\n  }\n\n  showSegment (e) {\n    this.currentLocaleCode = e.target.dataset.showSegmentLocale\n  }\n\n  _updateSegmentsVisibility () {\n    this.segmentTargets.forEach((el) => {\n      if (el.dataset.localeCode == this.currentLocale.code) {\n        el.classList.remove(\"d-none\")\n      } else {\n        el.classList.add(\"d-none\")\n      }\n    })\n  }\n\n  _findLocale (code) {\n    return this.locales.find((l) => { return l.code == code })\n  }\n\n  _updateCurrentLocaleInView () {\n    this.currentLocaleTarget.text = this.currentLocale.name\n  }\n\n  get currentLocale () {\n    return this._findLocale(this.currentLocaleCode)\n  }\n\n  get currentLocaleCode () {\n    return this.data.get('current-locale-code')\n  }\n\n  get locales () {\n    return this.switchTargets.map((el) => {\n      return {\n        code: el.dataset.showSegmentLocale,\n        name: el.text,\n      }\n    })\n  }\n\n  set currentLocaleCode (val) {\n    this.data.set('current-locale-code', val)\n    this._updateCurrentLocaleInView()\n    this._updateSegmentsVisibility()\n  }\n}\n"],"names":["SearchForm","toggleMoreFilters","e","preventDefault","moreFiltersTarget","classList","toggle","submitForm","key","element","submit","Controller","targets","const","Uppy","require","Dashboard","ActiveStorageUpload","MediaLibraryUploadBtn","initialize","uppy","use","trigger","this","triggerTarget","target","modalTarget","directUploadUrl","data","get","on","result","setTimeout","window","location","replace","serializeQuery","params","prefix","query","Object","keys","map","value","constructor","Array","encodeURIComponent","concat","apply","join","model","ids","Rails","ajax","type","url","id","args","assign","Sortable","connect","drake","dragula","containers","containerTarget","direction","mirrorContainer","moves","el","container","handle","dataset","onDrop","api","draggableIds","draggableTargets","d","isAttached","isEmpty","isUploaded","upload","from","inputTarget","files","forEach","file","doUpload","isUploading","DirectUpload","uploadUrl","create","error","blob","alert","hiddenField","document","createElement","_this","setAttribute","signed_id","name","appendChild","Api","success","resp","uploadedImageUrl","attributes","sizes","original","_isEmpty","inputContainerTarget","remove","add","_isUploading","progressTarget","_isUploaded","uploadedTarget","uploadedImgTarget","Kitsu","baseURL","_fetchInitialMedia","_setupDragula","_doUpload","removeImage","image","imagesContainerTarget","childNodes","find","child","getAttribute","currentTarget","_refreshMediaIds","_addImageToList","newImage","innerHTML","Mustache","render","imageTemplateTarget","children","_renderMedia","mediaData","media","mediaIds","m","parseInt","_showUploadProgress","_hideUploadProgress","then","push","Turbolinks","controller","adapter","progressBar","setValue","show","hide","sort","filter","JSON","parse","set","stringify","mediaIdsInputTarget","currentLocaleCode","showSegment","showSegmentLocale","_updateSegmentsVisibility","segmentTargets","localeCode","currentLocale","code","_findLocale","locales","l","_updateCurrentLocaleInView","currentLocaleTarget","text","switchTargets","val"],"mappings":"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"}